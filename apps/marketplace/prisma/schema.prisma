generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advertisements {
  id          Int      @id(map: "advertisements_pk") @default(autoincrement())
  category_id Int
  image       String   @db.VarChar
  description String   @db.VarChar
  link        String   @default("") @db.VarChar
  active      Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "advertisements_fk")
  clicks      clicks[]
}

model categories_parameters {
  category_id  Int
  parameter_id Int
  required     Boolean   @default(true)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  category     category  @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "categories_parameters_fk")
  parameter    parameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade, map: "categories_parameters_fk_1")

  @@id([category_id, parameter_id], map: "categories_parameters_pk")
}

model category {
  id                    Int                     @id(map: "category_pk") @default(autoincrement())
  name                  String                  @db.VarChar
  description           String                  @db.VarChar
  image                 String                  @db.VarChar
  cross_section_image   String                  @db.VarChar
  active                Boolean                 @default(true)
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                @default(now()) @db.Timestamptz(6)
  advertisements        advertisements[]
  categories_parameters categories_parameters[]
  listing               listing[]
}

model clicks {
  id               Int            @id(map: "clicks_pk") @default(autoincrement())
  advertisement_id Int
  user_id          String         @db.Uuid
  link             Boolean        @default(false)
  created_at       DateTime       @default(now()) @db.Timestamptz(6)
  advertisements   advertisements @relation(fields: [advertisement_id], references: [id], onDelete: Cascade, map: "clicks_fk")
  users            users          @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "clicks_fk_1")
}

model companies {
  id                  Int                   @id(map: "companies_pk") @default(autoincrement())
  name                String                @db.VarChar
  bio                 String?               @default("") @db.VarChar
  website             String?               @default("") @db.VarChar
  logo                String?               @default("") @db.VarChar
  visibility          Boolean               @default(true)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  companies_bookmarks companies_bookmarks[]
  companies_comments  companies_comments[]
  invite              invite?
  users               users[]
}

model companies_bookmarks {
  id         Int       @id(map: "companies_bookmarks_pk") @default(autoincrement())
  user_id    String    @db.Uuid
  company_id Int
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "companies_bookmarks_fk")
}

model companies_comments {
  id         Int       @id(map: "companies_comments_pk") @default(autoincrement())
  company_id Int
  comments   String    @db.VarChar
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "companies_comments_fk")
}

model invite {
  id         Int       @id(map: "invite_pk") @default(autoincrement())
  name       String    @db.VarChar
  email      String    @db.VarChar
  token      String
  expiry     DateTime  @default(now()) @db.Timestamptz(6)
  company_id Int
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  companies  companies @relation(fields: [id], references: [id], onDelete: Cascade, map: "invite_fk")
}

model listing {
  id                        Int                         @id(map: "listing_pk") @default(autoincrement())
  name                      String                      @db.VarChar
  description               String                      @db.VarChar
  price                     Decimal                     @default(0) @db.Decimal
  unit_price                Boolean                     @default(false)
  negotiable                Boolean                     @default(true)
  open                      Boolean                     @default(true)
  visibility                Boolean                     @default(true)
  active                    Boolean                     @default(true)
  category_id               Int
  type                      listingtype
  owner                     String                      @db.Uuid
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                DateTime                    @default(now()) @db.Timestamptz(6)
  category                  category                    @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "listing_fk")
  users                     users                       @relation(fields: [owner], references: [id], onDelete: Cascade, map: "listing_fk_1")
  listing_bookmarks         listing_bookmarks[]
  listing_images            listing_images[]
  listings_parameters_value listings_parameters_value[]
}

model listing_bookmarks {
  id         Int      @id(map: "listing_bookmarks_pk") @default(autoincrement())
  user_id    String   @db.Uuid
  listing_id Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "listing_bookmarks_fk")
  listing    listing  @relation(fields: [listing_id], references: [id], onDelete: Cascade, map: "listing_bookmarks_fk_1")
}

model listing_images {
  id         Int      @id(map: "listing_images_pk") @default(autoincrement())
  listing_id Int
  image      String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  listing    listing  @relation(fields: [listing_id], references: [id], onDelete: Cascade, map: "listing_images_fk")
}

model listings_parameters_value {
  listing_id   Int
  parameter_id Int
  value        String    @db.VarChar
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  listing      listing   @relation(fields: [listing_id], references: [id], onDelete: Cascade, map: "listings_parameters_value_fk")
  parameter    parameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade, map: "listings_parameters_value_fk_1")

  @@id([listing_id, parameter_id], map: "listings_parameters_value_pk")
}

model notification_settings {
  id      Int              @id(map: "notification_settings_pk") @default(autoincrement())
  user_id String           @db.Uuid
  type    notificationtype
  users   users            @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "notification_settings_fk")
}

model parameter {
  id                        Int                         @id(map: "parameter_pk") @default(autoincrement())
  type                      parametertype
  datatype                  datatype
  name                      String                      @db.VarChar
  display_name              String                      @db.VarChar
  active                    Boolean                     @default(true)
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                DateTime                    @default(now()) @db.Timestamptz(6)
  categories_parameters     categories_parameters[]
  listings_parameters_value listings_parameters_value[]
}

model parameter_choices {
  id         Int      @id(map: "parameter_choices_pk") @default(autoincrement())
  choice     String[] @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model user_bookmarks {
  id          Int      @id(map: "user_bookmarks_pk") @default(autoincrement())
  user_id     String   @db.Uuid
  target_user String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_bookmarks_fk")
}

model users {
  id                    String                  @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @db.VarChar
  full_name             String                  @db.VarChar
  phone                 String                  @db.VarChar
  profile_picture       String?                 @db.VarChar
  password              String                  @db.VarChar
  contact               usercontacts
  permissions           Int                     @default(0)
  enabled               Boolean                 @default(true)
  company_id            Int
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  clicks                clicks[]
  listing               listing[]
  listing_bookmarks     listing_bookmarks[]
  notification_settings notification_settings[]
  user_bookmarks        user_bookmarks[]
  companies             companies               @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "users_fk")
  users_comments        users_comments[]
}

model users_comments {
  id         Int      @id(map: "users_comments_pk") @default(autoincrement())
  user_id    String   @db.Uuid
  comments   String   @default("") @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "users_comments_fk")
}

enum datatype {
  string
  number
  boolean
}

enum listingtype {
  BUY
  SELL
}

enum notificationtype {
  TAB1
  TAB2
}

enum parametertype {
  WEIGHT
  DIMENSION
  TWO_CHOICES  @map("TWO CHOICES")
  MANY_CHOICES @map("MANY CHOICES")
  OPEN_ENDED   @map("OPEN ENDED")
}

enum usercontacts {
  whatsapp
  phone
  telegram
  facebook
  email
}
