name: Production Preview Deployment to AWS

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    branches: [dev]

jobs:
  preview-marketplace:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and save docker images
        id: save-docker-image
        run: |
          docker build -t ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:latest -f apps/marketplace/Dockerfile --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" --build-arg NEXTAUTH_SECRET="$(openssl rand -base64 32)" --build-arg NEXTAUTH_URL="http://ec2-18-142-177-240.ap-southeast-1.compute.amazonaws.com" .
          docker build -t ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }} -f apps/marketplace/Dockerfile --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" --build-arg NEXTAUTH_SECRET="$(openssl rand -base64 32)" --build-arg NEXTAUTH_URL="http://ec2-18-142-177-240.ap-southeast-1.compute.amazonaws.com" .
          docker save ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }} > marketplace-${{ github.sha }}.tar

      - uses: actions/upload-artifact@v3
        if: ${{ steps.save-docker-image.outcome == 'success' }}
        with:
          name: marketplace-${{ github.sha }}.tar
          path: marketplace-${{ github.sha }}.tar
          retention-days: 1

      - name: Push images into ECR
        run: |
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }}
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:latest

      - name: Restart task
        run: aws ecs update-service --force-new-deployment --service marketplace-service --cluster marketplace

      - name: Get Public DNS and IP
        run: |
          export PublicDnsName=$(aws ec2 describe-instances --query 'Reservations[].Instances[].PublicDnsName' --output text)
          export PublicIpAddress=$(aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "Public DNS: $PublicDnsName"
          echo "Public IP: $PublicIpAddress"

      - name: Output Public DNS and IP into PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            # Public DNS and IP
            Public DNS: $PublicDnsName
            Public IP: $PublicIpAddress
