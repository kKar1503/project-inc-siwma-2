name: Production Preview Deployment to AWS

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [dev]

jobs:
  preview-marketplace:
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and save docker images
        id: save-docker-image
        run: |
          docker build -t ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:latest -f apps/marketplace/Dockerfile --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" --build-arg CHALLENGE_API_KEY="ILoveOldGr4nn13sxOxO" --build-arg SIB_API_KEY="${{ secrets.SIB_API_KEY }}" --build-arg SIB_SENDER_EMAIL="${{ vars.SIB_SENDER_EMAIL }}" --build-arg NEXT_BUILD_OPTION="${{ vars.NEXT_BUILD_OPTION }}" --build-arg NEXT_ESLINT_OPTION="${{ vars.NEXT_ESLINT_OPTION }}" --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" --build-arg AWS_REGION="${{ secrets.AWS_REGION }}" --build-arg AWS_BUCKET="${{ secrets.AWS_BUCKET }}" --build-arg FRONTEND_URL="${{ vars.FRONTEND_URL }}" --build-arg MEILI_MASTER_KEY="${{ vars.MEILI_MASTER_KEY }}" --build-arg MEILI_URL="${{ vars.MEILI_URL }}" .
          docker tag ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:latest ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }}
        # docker save ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }} > marketplace-${{ github.sha }}.tar

      # - uses: actions/upload-artifact@v3
      #   if: ${{ steps.save-docker-image.outcome == 'success' }}
      #   with:
      #     name: marketplace-${{ github.sha }}.tar
      #     path: marketplace-${{ github.sha }}.tar
      #     retention-days: 1

      - name: Push images into ECR
        run: |
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:${{ github.sha }}
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/marketplace:latest

      - name: Restart task
        # TODO: do not restart tasks like this
        run: aws ecs update-service --force-new-deployment --service marketplace-service --cluster marketplace

      # instead, define a new task definition and update the service with the new task definition
      # but it will do for now :p

  preview-admin:
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and save docker images
        id: save-docker-image
        run: |
          docker build -t ${{ secrets.AWS_REPOSITORY_URI }}/admin:latest -f apps/admin/Dockerfile --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" --build-arg CHALLENGE_API_KEY="ILoveOldGr4nn13sxOxO" --build-arg SIB_API_KEY="${{ secrets.SIB_API_KEY }}" --build-arg SIB_SENDER_EMAIL="${{ vars.SIB_SENDER_EMAIL }}" --build-arg NEXT_BUILD_OPTION="${{ vars.NEXT_BUILD_OPTION }}" --build-arg NEXT_ESLINT_OPTION="${{ vars.NEXT_ESLINT_OPTION }}" --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" --build-arg AWS_REGION="${{ secrets.AWS_REGION }}" --build-arg AWS_BUCKET="${{ secrets.AWS_BUCKET }}" --build-arg FRONTEND_URL="${{ vars.FRONTEND_URL }}" .
          docker tag ${{ secrets.AWS_REPOSITORY_URI }}/admin:latest ${{ secrets.AWS_REPOSITORY_URI }}/admin:${{ github.sha }}
        # docker save ${{ secrets.AWS_REPOSITORY_URI }}/admin:${{ github.sha }} > admin-${{ github.sha }}.tar

      # - uses: actions/upload-artifact@v3
      #   if: ${{ steps.save-docker-image.outcome == 'success' }}
      #   with:
      #     name: admin-${{ github.sha }}.tar
      #     path: admin-${{ github.sha }}.tar
      #     retention-days: 1

      - name: Push images into ECR
        run: |
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/admin:${{ github.sha }}
          docker push ${{ secrets.AWS_REPOSITORY_URI }}/admin:latest
          
      - name: Restart task
        # TODO: do not restart tasks like this
        run: aws ecs update-service --force-new-deployment --service admin-service --cluster admin

      # instead, define a new task definition and update the service with the new task definition
      # but it will do for now :p
