generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model AccessTokens {
  id            Int           @id(map: "access_tokens_pk") @default(sequence(maxValue: 2147483647))
  token         String        @unique(map: "access_tokens_token_unique")
  refreshToken  Int           @map("refresh_token")
  userId        String        @map("user_id") @db.Uuid
  revoked       Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?     @map("updated_at") @db.Timestamptz(6)
  expiresAt     DateTime      @map("expires_at") @db.Timestamptz(6)
  refreshTokens RefreshTokens @relation(fields: [refreshToken, revoked], references: [id, revoked], onDelete: Cascade)
  users         Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([refreshToken])
  @@index([token])
  @@index([userId])
  @@map("access_tokens")
}

model Advertisements {
  id          Int       @id(map: "advertisements_pk") @default(sequence(maxValue: 2147483647))
  companyId   Int       @map("company_id")
  image       String
  description String
  link        String    @default("")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  startDate   DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate     DateTime  @default(now()) @map("end_date") @db.Timestamptz(6)
  companies   Companies @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "advertisements_fk")
  clicks      Clicks[]

  @@map("advertisements")
}

model CategoriesParameters {
  categoryId  Int       @map("category_id")
  parameterId Int       @map("parameter_id")
  required    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "categories_parameters_fk")
  parameter   Parameter @relation(fields: [parameterId], references: [id], onDelete: Cascade, map: "categories_parameters_fk_1")

  @@id([categoryId, parameterId], map: "categories_parameters_pk")
  @@map("categories_parameters")
}

model Category {
  id                   Int                    @id(map: "category_pk") @default(sequence(maxValue: 2147483647))
  name                 String
  description          String
  image                String
  crossSectionImage    String                 @map("cross_section_image")
  active               Boolean                @default(true)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)
  categoriesParameters CategoriesParameters[]
  listings             Listing[]

  @@map("category")
}

model Clicks {
  id              Int            @id(map: "clicks_pk") @default(sequence(maxValue: 2147483647))
  advertisementId Int            @map("advertisement_id")
  userId          String         @map("user_id") @db.Uuid
  link            Boolean        @default(false)
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  advertisements  Advertisements @relation(fields: [advertisementId], references: [id], onDelete: Cascade, map: "clicks_fk")
  users           Users          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "clicks_fk_1")

  @@map("clicks")
}

model Companies {
  id                 Int                  @id(map: "companies_pk") @default(sequence(maxValue: 2147483647))
  bio                String?              @default("")
  website            String?              @default("")
  logo               String?              @default("")
  visibility         Boolean              @default(true)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  name               String               @unique(map: "companies_un") @default("")
  comments           String?
  advertisements     Advertisements[]
  companiesBookmarks CompaniesBookmarks[]
  invites            Invite[]
  users              Users[]

  @@map("companies")
}

model CompaniesBookmarks {
  id        Int       @id(map: "companies_bookmarks_pk") @default(sequence(maxValue: 2147483647))
  userId    String    @map("user_id") @db.Uuid
  companyId Int       @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  companies Companies @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "companies_bookmarks_fk")

  @@map("companies_bookmarks")
}

model Invite {
  id        Int       @id(map: "invite_pk") @default(sequence(maxValue: 2147483647))
  name      String
  email     String    @unique(map: "invite_un")
  token     String
  expiry    DateTime  @default(now()) @db.Timestamptz(6)
  companyId Int       @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  companies Companies @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "invite_fk")

  @@map("invite")
}

model Listing {
  id                            Int                       @id(map: "listing_pk") @default(sequence(maxValue: 2147483647))
  name                          String
  description                   String
  price                         Decimal                   @default(0) @db.Decimal
  unitPrice                     Boolean                   @default(false) @map("unit_price")
  negotiable                    Boolean                   @default(true)
  categoryId                    Int                       @map("category_id")
  type                          ListingType
  owner                         String                    @db.Uuid
  createdAt                     DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime                  @default(now()) @map("updated_at") @db.Timestamptz(6)
  archived                      Boolean                   @default(false)
  deletedAt                     DateTime                  @default(now()) @map("deleted_at") @db.Timestamptz(6)
  category                      Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "listing_fk")
  users                         Users                     @relation(fields: [owner], references: [id], onDelete: Cascade, map: "listing_fk_1")
  listingBookmarks              ListingBookmarks[]
  listingImages                 ListingImages[]
  listingsParametersValues      ListingsParametersValue[]
  offersOffersListingTolistings Offers[]                  @relation("offersListingTolisting")
  roomsRoomsListingTolistings   Rooms[]                   @relation("roomsListingTolisting")

  @@map("listing")
}

model ListingBookmarks {
  id        Int      @id(map: "listing_bookmarks_pk") @default(sequence(maxValue: 2147483647))
  userId    String   @map("user_id") @db.Uuid
  listingId Int      @map("listing_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "listing_bookmarks_fk")
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "listing_bookmarks_fk_1")

  @@map("listing_bookmarks")
}

model ListingImages {
  id        Int      @id(map: "listing_images_pk") @default(sequence(maxValue: 2147483647))
  listingId Int      @map("listing_id")
  image     String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "listing_images_fk")

  @@map("listing_images")
}

model ListingsParametersValue {
  listingId   Int       @map("listing_id")
  parameterId Int       @map("parameter_id")
  value       String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade, map: "listings_parameters_value_fk")
  parameter   Parameter @relation(fields: [parameterId], references: [id], onDelete: Cascade, map: "listings_parameters_value_fk_1")

  @@id([listingId, parameterId], map: "listings_parameters_value_pk")
  @@map("listings_parameters_value")
}

model Messages {
  id                            Int         @id(map: "messages_pk") @default(sequence())
  author                        String      @db.Uuid
  room                          String      @db.Uuid
  read                          Boolean     @default(false)
  createdAt                     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  contentType                   ContentType @map("content_type")
  offer                         Int?
  content                       String
  offersMessagesOfferTooffers   Offers?     @relation("messagesOfferTooffers", fields: [offer], references: [id], onDelete: Cascade, map: "messages_fk")
  rooms                         Rooms       @relation(fields: [room], references: [id], onDelete: Cascade, map: "messages_fk_1")
  users                         Users       @relation(fields: [author], references: [id], onDelete: Cascade, map: "messages_fk_2")
  offersOffersMessageTomessages Offers[]    @relation("offersMessageTomessages")

  @@map("messages")
}

model NotificationSettings {
  id     Int              @id(map: "notification_settings_pk") @default(sequence(maxValue: 2147483647))
  userId String           @map("user_id") @db.Uuid
  type   NotificationType
  users  Users            @relation(fields: [userId], references: [id], onDelete: Cascade, map: "notification_settings_fk")

  @@map("notification_settings")
}

model Offers {
  id                              Int        @id(map: "offers_pk") @default(sequence())
  listing                         Int
  message                         Int
  amount                          Float      @default(0.0)
  accepted                        Boolean    @default(false)
  messagesMessagesOfferTooffers   Messages[] @relation("messagesOfferTooffers")
  listingOffersListingTolisting   Listing    @relation("offersListingTolisting", fields: [listing], references: [id], onDelete: Cascade, map: "offers_fk")
  messagesOffersMessageTomessages Messages   @relation("offersMessageTomessages", fields: [message], references: [id], onDelete: Cascade, map: "offers_fk_1")

  @@map("offers")
}

model Parameter {
  id                       Int                       @id(map: "parameter_pk") @default(sequence(maxValue: 2147483647))
  type                     ParameterType
  dataType                 DataType                  @map("data_type")
  name                     String
  displayName              String                    @map("display_name")
  active                   Boolean                   @default(true)
  createdAt                DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                  @default(now()) @map("updated_at") @db.Timestamptz(6)
  options                  String[]
  categoriesParameters     CategoriesParameters[]
  listingsParametersValues ListingsParametersValue[]

  @@map("parameter")
}

model RefreshTokens {
  id           Int            @id(map: "refresh_tokens_pk") @default(sequence(maxValue: 2147483647))
  token        String         @unique(map: "refresh_tokens_token_unique")
  userId       String         @map("user_id") @db.Uuid
  revoked      Boolean        @default(false)
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?      @map("updated_at") @db.Timestamptz(6)
  expiresAt    DateTime       @map("expires_at") @db.Timestamptz(6)
  accessTokens AccessTokens[]
  users        Users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, revoked])
  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Rooms {
  id                           String     @id(map: "rooms_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seller                       String     @db.Uuid
  buyer                        String     @db.Uuid
  createdAt                    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  listing                      Int
  messages                     Messages[]
  listingRoomsListingTolisting Listing    @relation("roomsListingTolisting", fields: [listing], references: [id], onDelete: Cascade, map: "rooms_fk")
  usersRoomsSellerTousers      Users      @relation("roomsSellerTousers", fields: [seller], references: [id], onDelete: Cascade, map: "rooms_fk_1")
  usersRoomsBuyerTousers       Users      @relation("roomsBuyerTousers", fields: [buyer], references: [id], onDelete: Cascade, map: "rooms_fk_2")

  @@map("rooms")
}

model Sibkeys {
  key            String @id(map: "sibkeys_pk")
  remainingCount Int    @default(300) @map("remaining_count")
  senderEmail    String @map("sender_email")

  @@unique([key, senderEmail], map: "sibkeys_un")
  @@map("sibkeys")
}

model UserBookmarks {
  id         Int      @id(map: "user_bookmarks_pk") @default(sequence(maxValue: 2147483647))
  userId     String   @map("user_id") @db.Uuid
  targetUser String   @map("target_user") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  users      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_bookmarks_fk")

  @@map("user_bookmarks")
}

model Users {
  id                      String                 @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String                 @unique(map: "users_un")
  name                    String                 @unique(map: "users_name_idx")
  phone                   String                 @unique(map: "users_un_phone")
  profilePicture          String?                @map("profile_picture")
  password                String
  contact                 UserContacts
  permissions             Int                    @default(0)
  enabled                 Boolean                @default(true)
  companyId               Int                    @map("company_id")
  createdAt               DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  bio                     String?
  comments                String?
  accessTokens            AccessTokens[]
  clicks                  Clicks[]
  listings                Listing[]
  listingBookmarks        ListingBookmarks[]
  messages                Messages[]
  notificationSettings    NotificationSettings[]
  refreshTokens           RefreshTokens[]
  roomsRoomsSellerTousers Rooms[]                @relation("roomsSellerTousers")
  roomsRoomsBuyerTousers  Rooms[]                @relation("roomsBuyerTousers")
  userBookmarks           UserBookmarks[]
  companies               Companies              @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "users_fk")

  @@map("users")
}

enum ContentType {
  text
  file
  image
  offer
}

enum DataType {
  string
  number
  boolean
}

enum ListingType {
  BUY
  SELL
}

enum NotificationType {
  TAB1
  TAB2
}

enum ParameterType {
  WEIGHT
  DIMENSION
  TWO_CHOICES  @map("TWO CHOICES")
  MANY_CHOICES @map("MANY CHOICES")
  OPEN_ENDED   @map("OPEN ENDED")
}

enum UserContacts {
  whatsapp
  phone
  telegram
  facebook
  email
}
